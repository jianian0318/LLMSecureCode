CWE-020-codeql_2.py
   CWE-502: Deserializing user-controlled data may allow attackers to execute arbitrary code.
   CWE-79: Writing user input directly to a web page allows for a cross-site scripting vulnerability.
   CWE-22: Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.
CWE-020-codeql_4.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-022-author_2.py
   CWE-22: Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
CWE-022-codeql_1.py
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-022-codeql_2.py
    no vulnerability found
CWE-078-author_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
CWE-078-codeql_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
CWE-089-codeql_1.py
   CWE-259: Possible hardcoded password: 'password'
CWE-094-author_1.py
    no vulnerability found
CWE-116-codeql_1.py
   CWE-116: Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.
CWE-502-author_1.py
   CWE-502: Consider possible security implications associated with pickle module.
CWE-502-codeql_1.py
   CWE-502: Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
CWE-502-sonar_1.py
    no vulnerability found
CWE-601-sonar_2.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-611-author_1.py
    no vulnerability found
CWE-798-codeql_1.py
   CWE-798: Credentials are hard coded in the source code of the application.
total: 12 vulnerable files, 14 vulnerabilities found
