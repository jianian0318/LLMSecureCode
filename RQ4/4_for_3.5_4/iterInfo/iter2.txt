CWE-020-author_1.py
    no vulnerability found
CWE-020-author_2.py
    no vulnerability found
CWE-020-codeql_2.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
CWE-020-codeql_3.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-020-codeql_4.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-022-author_2.py
   CWE-22: Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
CWE-022-codeql_1.py
    no vulnerability found
CWE-022-codeql_2.py
    no vulnerability found
CWE-078-author_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
CWE-078-codeql_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-730: Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.
   CWE-22: Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
CWE-079-codeql_1.py
    no vulnerability found
CWE-079-codeql_2.py
    no vulnerability found
CWE-089-author_1.py
    no vulnerability found
CWE-094-author_1.py
   CWE-79: Writing user input directly to a web page allows for a cross-site scripting vulnerability.
CWE-094-sonar_1.py
    no vulnerability found
CWE-116-author_1.py
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-116-codeql_1.py
    no vulnerability found
CWE-117-codeql_1.py
    no vulnerability found
CWE-215-codeql_1.py
    no vulnerability found
CWE-295-codeql_1.py
    no vulnerability found
CWE-326-author_1.py
    no vulnerability found
CWE-327-codeql_2.py
    no vulnerability found
CWE-377-codeql_1.py
    no vulnerability found
CWE-502-codeql_1.py
    no vulnerability found
CWE-611-author_1.py
    no vulnerability found
CWE-611-codeql_1.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
CWE-611-sonar_1.py
    no vulnerability found
CWE-611-sonar_2.py
    no vulnerability found
CWE-611-sonar_3.py
    no vulnerability found
CWE-611-sonar_4.py
    no vulnerability found
CWE-643-codeql_1.py
    no vulnerability found
CWE-643-sonar_1.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
CWE-730-codeql_1.py
   CWE-117: User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to inject an expression that could require exponential time on certain inputs.
CWE-730-codeql_2.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-79: Writing user input directly to a web page allows for a cross-site scripting vulnerability.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
CWE-732-author_1.py
    no vulnerability found
CWE-798-codeql_1.py
   CWE-259: Possible hardcoded password: ''
CWE-918-codeql_1.py
   CWE-79: Writing user input directly to a web page allows for a cross-site scripting vulnerability.
   CWE-22: Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.
   CWE-918: Making a network request to a URL that is fully user-controlled allows for request forgery attacks.
CWE-918-codeql_2.py
    no vulnerability found
total: 14 vulnerable files, 29 vulnerabilities found
