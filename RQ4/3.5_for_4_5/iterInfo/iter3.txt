CWE-020-codeql_1.py
    no vulnerability found
CWE-020-codeql_2.py
   CWE-502: Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
CWE-020-codeql_3.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
   CWE-732: A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks.
CWE-020-codeql_4.py
   CWE-20: Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-022-author_1.py
    no vulnerability found
CWE-022-author_2.py
   CWE-22: Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
CWE-078-author_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
CWE-078-codeql_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
   CWE-730: Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.
CWE-089-author_1.py
   CWE-259: Possible hardcoded password: 'your_password'
   CWE-798: Credentials are hard coded in the source code of the application.
CWE-090-codeql_1.py
   CWE-22: Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.
CWE-094-author_1.py
    no vulnerability found
CWE-094-sonar_1.py
   CWE-78: Use of possibly insecure function - consider using safer ast.literal_eval.
   CWE-94: Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution.
CWE-116-author_1.py
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-116-codeql_1.py
   CWE-116: Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.
CWE-117-codeql_1.py
   CWE-117: Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.
CWE-327-codeql_2.py
   CWE-327: Using an insecure SSL/TLS version may leave the connection vulnerable to attacks.
CWE-327-codeql_4.py
    no vulnerability found
CWE-502-author_1.py
   CWE-502: Consider possible security implications associated with pickle module.
CWE-502-codeql_1.py
   CWE-502: Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
CWE-601-codeql_1.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-601-sonar_2.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-611-author_1.py
   CWE-20: Parsing user input as an XML document with external entity expansion is vulnerable to XXE attacks.
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-611-codeql_1.py
    no vulnerability found
CWE-611-sonar_3.py
    no vulnerability found
CWE-611-sonar_4.py
    no vulnerability found
CWE-776-codeql_1.py
   CWE-20: Parsing user input as an XML document with arbitrary internal entity expansion is vulnerable to denial-of-service attacks.
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-918-codeql_1.py
   CWE-22: Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.
   CWE-918: Making a network request to a URL that is fully user-controlled allows for request forgery attacks.
CWE-918-codeql_2.py
   CWE-918: Making a network request to a URL that is partially user-controlled allows for request forgery attacks.
total: 21 vulnerable files, 31 vulnerabilities found
