CWE-020-codeql_4.py
   CWE-20: Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-078-author_1.py
   CWE-78: subprocess call - check for execution of untrusted input.
CWE-090-codeql_1.py
    no vulnerability found
CWE-116-author_1.py
   CWE-643: Accessing paths influenced by users can allow an attacker to access unexpected resources.
CWE-117-codeql_1.py
   CWE-117: Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.
CWE-327-codeql_3.py
   CWE-326: Using broken or weak cryptographic hashing algorithms can compromise security.
   CWE-798: Credentials are hard coded in the source code of the application.
CWE-502-mitre_1.py
    no vulnerability found
CWE-601-codeql_1.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-601-sonar_2.py
   CWE-601: URL redirection based on unvalidated user input may cause redirection to malicious web sites.
CWE-611-author_1.py
   CWE-20: Using lxml.etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree with the equivalent defusedxml package.
CWE-611-codeql_1.py
   CWE-20: Using lxml.etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree with the equivalent defusedxml package.
CWE-611-sonar_3.py
    no vulnerability found
CWE-918-codeql_1.py
    no vulnerability found
CWE-918-codeql_2.py
   CWE-94: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   CWE-215: Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.
total: 10 vulnerable files, 13 vulnerabilities found
